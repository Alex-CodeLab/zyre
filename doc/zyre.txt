zyre(3)
=======

NAME
----
zyre - API wrapping one Zyre node

SYNOPSIS
--------
----
//  Constructor, creates a new Zyre node. Note that until you start the
//  node it is silent and invisible to other nodes on the network.
CZMQ_EXPORT zyre_t *
    zyre_new (void);

//  Destructor, destroys a Zyre node. When you destroy a node, any
//  messages it is sending or receiving will be discarded.
CZMQ_EXPORT void
    zyre_destroy (zyre_t **self_p);

//  Return our own UUID, after successful initialization.
CZMQ_EXPORT const char *
    zyre_uuid (zyre_t *self);

//  Set node header; these are provided to other nodes during discovery
//  and come in each ENTER message.
CZMQ_EXPORT void
    zyre_set_header (zyre_t *self, char *name, char *format, ...);

//  Set verbose mode; this tells the node to log all traffic as well
//  as all major events.
CZMQ_EXPORT void
    zyre_set_verbose (zyre_t *self);

//  Set ZRE discovery port; defaults to 5670, this call overrides that
//  so you can create independent clusters on the same network, for e.g
//  development vs. production. Has no effect after zyre_start().
CZMQ_EXPORT void
    zyre_set_port (zyre_t *self, int port_nbr);

//  Set ZRE discovery interval, in milliseconds. Default is instant
//  beacon exploration followed by pinging every 1,000 msecs.
CZMQ_EXPORT void
    zyre_set_interval (zyre_t *self, size_t interval);

//  Start node, after setting header values. When you start a node it
//  begins discovery and connection.
CZMQ_EXPORT void
    zyre_start (zyre_t *self);

//  Stop node; this signals to other peers that this node will go away.
//  This is polite; however you can also just destroy the node without
//  stopping it.
CZMQ_EXPORT void
    zyre_stop (zyre_t *self);

//  Join a named group; after joining a group you can send messages to
//  the group and all Zyre nodes in that group will receive them.
CZMQ_EXPORT int
    zyre_join (zyre_t *self, const char *group);

//  Leave a group
CZMQ_EXPORT int
    zyre_leave (zyre_t *self, const char *group);

//  Receive next message from network; the message may be a control
//  message (ENTER, EXIT, JOIN, LEAVE) or data (WHISPER, SHOUT).
//  Returns zmsg_t object, or NULL if interrupted
CZMQ_EXPORT zmsg_t *
    zyre_recv (zyre_t *self);

//  Send message to single peer, specified as a UUID string
//  Destroys message after sending
CZMQ_EXPORT int
    zyre_whisper (zyre_t *self, char *peer, zmsg_t **msg_p);

//  Send message to a named group
//  Destroys message after sending
CZMQ_EXPORT int
    zyre_shout (zyre_t *self, char *group, zmsg_t **msg_p);

//  Send formatted string to a single peer specified as UUID string
CZMQ_EXPORT int
    zyre_whispers (zyre_t *self, char *peer, char *format, ...);

//  Send formatted string to a named group
CZMQ_EXPORT int
    zyre_shouts (zyre_t *self, char *group, char *format, ...);

//  Return socket for talking to the Zyre node, for polling
CZMQ_EXPORT zsock_t *
    zyre_socket (zyre_t *self);

//  Prints zyre information
CZMQ_EXPORT void
    zyre_dump (zyre_t *self);

//  Self test of this class
CZMQ_EXPORT void
    zyre_test (bool verbose);
----

DESCRIPTION
-----------

Zyre does local area discovery and clustering. A Zyre node broadcasts
UDP beacons, and connects to peers that it finds. This class wraps a
Zyre node with a message-based API.

All incoming events are zmsg_t messages delivered via the zyre_recv
call. The first frame defines the type of the message, and following
frames provide further values:

    ENTER fromnode headers ipaddress:port
        a new peer has entered the network
    EXIT fromnode
        a peer has left the network
    JOIN fromnode groupname
        a peer has joined a specific group
    LEAVE fromnode groupname
        a peer has joined a specific group
    WHISPER fromnode message
        a peer has sent this node a message
    SHOUT fromnode groupname message
        a peer has sent one of our groups a message
        
In SHOUT and WHISPER the message is zero or more frames, and can hold
any ZeroMQ message. In ENTER, the headers frame contains a packed
dictionary, see zhash_pack/unpack.

To join or leave a group, use the zyre_join and zyre_leave methods.
To set a header value, use the zyre_set_header method. To send a message
to a single peer, use zyre_whisper. To send a message to a group, use
zyre_shout.

Todo: allow multipart contents

EXAMPLE
-------
.From zyre_test method
----
    //  Create two nodes
    zyre_t *node1 = zyre_new ();
    zyre_t *node2 = zyre_new ();
    zyre_set_header (node1, "X-HELLO", "World");
    assert (strneq (zyre_uuid (node1), zyre_uuid (node2)));

    //  Test ability to switch to different discovery port
    //  Both nodes have to be using same port, or test will fail.
    zyre_set_port (node1, 5670);
    zyre_set_port (node2, 5670);
    
    zyre_start (node1);
    zyre_start (node2);
    zyre_join (node1, "GLOBAL");
    zyre_join (node2, "GLOBAL");

    //  Give time for them to interconnect
    zclock_sleep (250);

    //  One node shouts to GLOBAL
    zyre_shouts (node1,"GLOBAL", "Hello, World");

    //  TODO: should timeout and not hang if there's no networking
    //  ALSO why doesn't this work with localhost? zbeacon?
    //  Second node should receive ENTER, JOIN, and SHOUT
    zmsg_t *msg = zyre_recv (node2);
    assert (msg);
    char *command = zmsg_popstr (msg);
    assert (streq (command, "ENTER"));
    zstr_free (&command);
    char *peerid = zmsg_popstr (msg);
    zstr_free (&peerid);
    zframe_t *headers_packed = zmsg_pop (msg);
    char *peeraddress = zmsg_popstr (msg);
    zstr_free (&peeraddress);

    assert (headers_packed);
    zhash_t *headers = zhash_unpack (headers_packed);
    assert (headers);
    zframe_destroy (&headers_packed);
    assert (streq (zhash_lookup (headers, "X-HELLO"), "World"));
    zhash_destroy (&headers);
    zmsg_destroy (&msg);
    
    msg = zyre_recv (node2);
    assert (msg);
    command = zmsg_popstr (msg);
    assert (streq (command, "JOIN"));
    zstr_free (&command);
    zmsg_destroy (&msg);
    
    msg = zyre_recv (node2);
    assert (msg);
    command = zmsg_popstr (msg);
    assert (streq (command, "SHOUT"));
    zstr_free (&command);
    zmsg_destroy (&msg);
    
    zyre_stop (node1);
    zyre_stop (node2);
    
    zyre_destroy (&node1);
    zyre_destroy (&node2);
----

